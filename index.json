[{"categories":null,"contents":" 字符的編、解碼 何謂 Unicode? UTF-8 是? 字形庫 特殊符號的使用 HTML、CSS、JavaScript 如何使用 Unicode 編碼的設定 實用的工具網站 字符的編、解碼 對於電腦而言，每個字符不過是用一串的編碼來表示，比如英文小寫字符 \u0026lsquo;a\u0026rsquo;\n在 ASCII 編碼方式中，以16進位數字 0x61 表示。 在 Unicode 編碼方式則是16進位數字 00000061。 在 UTF-8 編碼方式則是16進位數字 61。 以 VSCode 為例，但包含多數的文字編輯器，都可以選擇儲存的編碼類型，也可以選擇打開文件的解碼類型。當然理論上用什麼編碼儲存就要用相同之解碼器打開 UTF-8 就是一種世界通用的編碼格式，因為它支援所有不同語言使用到的文字，故大多數軟體預設的編、解碼方式都是 UTF-8。\n而瀏覽器也是要讀取 HTML、CSS 等檔案進行渲染，因此也得知道這些檔案的儲存格式，而現在這些檔案多用 UTF-8 來編碼保存，所以瀏覽器也得用 UTF-8 來解碼內容。\n何謂 Unicode? UTF-8 是? 旨在容納世界所有文字符號的國際標準編碼，使用 4 Bytes 為每個字元編碼。 然而這 4 Bytes 實際上是稱作 Unicode 碼位 (Code Point)，雖代表獨一無二的字元，卻並非實際儲存到檔案的編碼。 實際儲存到檔案的則是要看 Unicode 採用哪種編碼格式。\nUnicode 本身不限定存儲方式，但常見的編碼方式有：\nUTF-8（可變長度編碼，1 ~ 4 Bytes） UTF-16（通常用 2 或 4 Bytes） UTF-32（固定 4 Bytes） Unicode 碼位 (Code Point)，雖不是直接儲存的數據，卻可以定位獨一無二的字元，碼位範圍是 U+0000 至 U+10FFFF。\n對於絕大多數常用字符，其碼位都能用 2 Bytes 表示，即 4 個十六進數字表示（範圍在 U+0000 至 U+FFFF）。 因此，可以發現在 HTML、CSS 等檔案中引用 Unicode 字符時，格式都是只用 2 Bytes 的碼位表示，比如說 bullet point 的碼位為 U+2022。\n一律建議使用 Unicode 的 UTF-8 編碼方式 UTF-8 是 Unicode 的一種編碼方式，優勢是每個字符佔用的大小是可變的，根據字符的 Unicode 編號範圍，每個字符所需的字節數從 1 到 4 Bytes 不等，顯而意見的好處是可以節省儲存空間。比如說:\nbullet point 的碼位是 (U+2022)，其 UTF-8 編碼是 3bytes 為：0xE2 0x80 0xA2。 小寫英文字母 a 的碼位是 (U+0061)，其 UTF-8 編碼只佔 1 byte 為: 0x61。 網頁開發者會使用碼位表示字符，而無須直接把 UTF-8 或其他編碼格式的編碼寫出來。\nUTF-8 的優勢 UTF-8 的設計解決了以上問題，主要優勢包括：\n變長編碼，節省空間 常用字符（ASCII 範圍內）只需 1 Byte。 不常用的字符會用 2-4 Bytes 表示，符合實際使用的頻率分佈。 向後兼容 ASCII: 舊系統可以直接讀取 UTF-8 中的 ASCII 字符，而不需要特殊處理，因為 UTF-8 中對 ASCII 字符的編碼一模一樣，也都是 1 byte。 全球化支持: 可以表示所有 Unicode 字符，滿足全球多語言需求。 錯誤檢測能力: UTF-8 的編碼設計能夠檢測許多常見的數據錯誤，提升了數據的可靠性。 字形庫 編碼集 \u0026lt;-\u0026gt; 字形庫 之間的關係為何?\nUnicode 定義了每個字符的 Code Point 碼位。 而對於每一個 Unicode Code Point\nUnicode 定義了其字符意義。 UTF-8 定義了其字符底層編碼 (是幾個 bytes，每個 byte 的值)。 字形庫 定義了其字符形狀。 比如說 Unicode 碼位 U+2022\nUnicode 定義其意義為 bullet point。 UTF-8 定義其編碼為 3 Bytes，編碼值為 0xE2 0x80 0xA2。 根據選用的字形庫則決定了在螢幕上， bullet point 顯示的形狀。 所以真正定義字符形狀的是由字形庫。字形庫會去實現他所支援的 Unicode 碼位的字形，可能是 svg 圖，或者點陣圖等等。 當你套用不同字形庫時，同一個意義的字符可能長得不一樣。 當然，不可能有一個字形庫實現所有的 Unicode 字符，所以要注意自己想要的字符是否可以被多數的字形庫支援，盡量選用支援度高的。\n特殊符號的使用 一般符號，比如說英文的 26 字母，或是中文的字符，都可以靠輸入法輸入編輯器中。 然而，總是有些時候需要一些特殊符號來標註或者作特定使用，然而卻是輸入法或者應用程式沒有直接支援的。 但是 Unicode 包含了所有字符的定義，我們大可去網路上找出該字符，然後在編輯器中使用它。\n程式設計師在撰寫 HTML、CSS 檔案時，可以怎麼使用特殊符號呢? 一樣舉 bullet point 為例:\nCSS 檔案內可以寫 \u0026ldquo;\\2022\u0026rdquo; 也可以寫 \u0026ldquo;•\u0026rdquo;; 第 1 種寫法， CSS 檔案中的 string 內使用 \\ 是 Unicode 的轉譯符號，後面接 4 個位數 16 進制的碼位，表示特定字符。這種把碼位寫出來的方式，需把 \u0026lsquo;'、\u0026lsquo;2\u0026rsquo;、\u0026lsquo;0\u0026rsquo;、\u0026lsquo;2\u0026rsquo;、\u0026lsquo;2\u0026rsquo; 都存入檔案，較占用檔案空間。以 UTF-8 較省空間的編碼保存檔案，也會占用 5 Bytes。\n第 2 種寫法，直接寫 \u0026lsquo;•\u0026rsquo;，好處是省檔案空間，又可以直接看到是什麼符號。然而有時候你的輸入法或者編輯器程式，沒有內建幫你輸入特殊符號的功能，那你就得去找到這個符號來複製，然後用貼上的方式輸入了，這不是什麼問題。但有時候搞不好 vscode 使用的字型不支援這個符號，那就沒有對應的圖形樣式，則無法在編輯器上呈現，這時用第一種作法就比較好。\nHTML、CSS、JavaScript 如何使用 Unicode 不同的語言或環境對於嵌入 Unicode 碼位的書寫格式有不同的要求。 比如 Unicode 碼位 U+2022，即 bullet point 在不同網頁語言下取用方式如下:\n語言/環境 使用方式 解釋 HTML \u0026amp;#8226; HTML 實體，十進制形式。 HTML \u0026amp;#x2022; HTML 實體，十六進制形式。 CSS \\2022 CSS 的簡化 Unicode 表示法，十六進制形式。 JavaScript \\u2022 JavaScript 字符串的 Unicode 表示，十六進制形式。 比如說在 CSS 語言中的字元或字串中輸入\u0026quot;\\2022\u0026quot;，這個格式是 Unicode 轉義序列。\n\\ 是轉義符號，表示接下來是一個 Unicode 碼位。 2022 是十六進制的 Unicode 字符值，對應某個字符的圖標。 編碼的設定 現代的 HTML 預設使用 UTF-8 作為字符編碼，只要在 中指定： \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt;\n\u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; 的主要目的，是明確告訴瀏覽器這個 HTML 文件使用的字符編碼是 UTF-8，以避免因編碼錯誤導致的文字亂碼問題。 即使文件本身已保存為 UTF-8 格式，仍然需要這個標籤來確保瀏覽器正確解讀文件的內容。 因為如果未在 中明確指定字符集，瀏覽器會根據：\nHTTP 回應頭中的 Content-Type。(如 Content-Type: text/html; charset=ISO-8859-1) 預設的字符編碼（如某些地區設置默認為 ISO-8859-1）。 文件內容 等進行猜測，而如果猜測的編碼與實際編碼不符，就會導致亂碼。\nCSS 本身不直接指定文件編碼，但它繼承 HTML 的編碼環境，一般也都是 UTF-8 啦。\n實用的工具網站 通常實用的做法是直接找字形庫，依照嵌入的方式，複製其字符或者碼位。至於 UTF-8 編碼，對一般使用者來說較不重要，除非你是寫編輯器或瀏覽器的人，不然根本不需要去碰到底層編碼。或者是你單純想看看其編碼為何。\n通常上瀏覽器，搜尋 UTF-8 符號，點開任意連結，複製想要的內容貼上即可。\n工具網站\n字形庫 Themify\n不過這個的缺點是網頁上沒有直接顯示符號對應的碼位，但可以下載後再將字形檔案丟到 Font Drop 就可以查看字符跟 Unicode 位碼對照著看。 但是有支援很多漂亮 icons 可以用阿! 可以看到這些 icons 的位碼，是 (U+exxx) 經查詢屬於 Private Use Area，所以要下載這個字形庫才有支援阿，其他的字形庫不見得有支援這個位碼。 symbol.cc，列出許多 Unicode Symbol。\n除了基本的 Code point，也直接顯示 HTML、CSS、JavaScript 嵌入的格式，相當貼心。 連 Alt Code 都有，在 Windows 下可以按住 Alt 加上 Code 打出特殊文字。 也可切換到 Encoding 頁面看各種編碼。 Font Drop: 支援拖曳 .ttf 或 .woff 文件，檢視所有符號。\n","permalink":"https://wsmao.github.io/blog/website_with_utf-8/","tags":["unicode"],"title":"字符的旅程"},{"categories":null,"contents":"今天認識了前澤友作這位傳奇商業奇才，才 40 多歲，身價就高達 36 億美元的日本富豪。\n我感興趣的不是他多有錢，而是他有多特別，想了解他不一樣的人生以及思維。 他可說是說做就做的人，並且幾乎每一樣都可以大獲成功，這點跟 Elon Musk 非常類似。 有趣的是在獲得商業成功以前，還曾是知名搖滾樂團鼓手。\n以下是他幾個有趣的經歷:\n畢業於早稻田實業學校，在校時就成立重金屬樂團 Switch Style 擔任樂團鼓手。 他為了更真實地體驗日本體驗不到的音樂文化，還跑到美國街頭只為就近體驗。 回國後於 1993 發行首張 EP 即大賣，開始巡迴之旅。 自己喜歡蒐集唱片，從美國購買回來後意外發現有許多人也喜歡，只是有需求卻苦無門路，因此他開始嘗試從美國代購唱片，做起代購生意，做得有聲有色。 自己喜歡潮服，思考會不會喜歡那些唱片的人也喜歡這些潮服，想不到又大賣了。 自學編程架設電商，1998 年創立 線上時尚零售店 Start Today。 於 2004 年，將整合多家小型通路合併為 ZOZOTOWN。 dearMoon 計畫，2018 包下 SpaceX 大型獵鷹火箭，徵求 6-8 位藝術家在 2023 年一同環繞月球。 可惜於 2024 取消，因為 SpaceX Starship 星艦研發推延無法在預定時間 2023 年完成任務。 但在 2021 年，在俄羅斯的幫助下，自費登上了國際太空站，已完成他的太空夢。 我喜歡他的叛逆，喜歡他與眾不同，特立獨行。喜歡他說幹就幹，Start Today 的精神。\n他喜歡分享，喜歡開箱自己的新玩具，喜歡藝術、名車、名錶、私人飛機。 他不喜歡無聊，不願當朝九晚五的上班族，鼓勵大家少點工作，多點興趣。 他說錢是越花多的，有錢就花，會花才會賺。 而我最想學習的是他 Start Today 的精神。Let\u0026rsquo;s Start Something Today!\n","permalink":"https://wsmao.github.io/blog/starttoday/","tags":null,"title":"前澤友作 — 不走平凡路"},{"categories":null,"contents":"一直以來，專注力的問題都很困擾著我。我很想專注在某些事情上，但就是很容易分心。\n我也看過很多關於專注方法的書籍，嘗試過很多方法，但總感覺很容易回到原點。\n所以，我打算來場專注力的實驗，並在這邊記錄下來，嘗試發現我的問題點，並找到對我有效的方法。\n發現 我發現寫作的時候我蠻容易進入心流的。 我發現我常常知道 A 是最重要的事情，但我卻做 BCD。 發現:常常早上要工作的時候，還沒想好自己要先做什麼，每天都在拔河。 當你給自己太多選擇，你就無法專注。 畢竟最重要的事情只有一件，不應該還要為該做什麼做出選擇。\n當你開始你的一天而你需要思考接下來要做什麼，並且覺得掙扎，那就該反思是否根本沒有排序找出真正重要的事情，所以才有這麼多選擇，導致不專注。\n要找出最重要的事情，要先問:這件事帶給自己的核心價值是什麼，不做會怎麼樣?\n向巴菲特學習 成功的人不會什麼都做，而是把力氣花在少數重要的事上。 把所有目標排序，選出最重要的5件事，沒完成1號任務，就不要投入2號。 其餘的次要目標完全不要碰，因為「做一半」實際上等於「沒做」。 發現: 上班第一件做的事情，通常就會一直做下去。 所以應該要避免第一件事就做跟工作無關的事情，最好直接做工作中最重要的事情。\n","permalink":"https://wsmao.github.io/blog/%E5%B0%88%E6%B3%A8%E5%8A%9B%E4%BF%AE%E7%85%89/","tags":["focus"],"title":"專注力修煉"},{"categories":null,"contents":"用一個旁觀者的角度，主動去意識自己的行為，進而了解自己，探索自己。\n愛寫的我 我很愛寫，因為寫的時候就是我思考的時候。當我整理我的思緒，搞懂一些事情的時候，那種自我提升、進步的感覺是非常愉悅的。\n當有一堆想法的時候，我喜歡寫出來，當我寫出來我才發現這是零碎且混亂的。 我的大腦是如此有趣，一次只能想一件事情，但下一刻想的事情卻可能是此時此刻想也想不到的。 此時我可以利用筆記，它就像是我擴充的記憶體，我可以把所有想法載入，這樣我就可以同時看到這些想法。 更有趣的是，這時我就可以用第三者的視角來看自己腦中的想法。 我可以看到這些想法或許很有趣，或許是亂的無組織的，也可能根本是錯誤的。 然後我就可以跟自己對話，問自己問題，重新去組織，調整這些想法，產生新的想法。\n這種作法也適用於學習，當學習之後，我也喜歡寫出我的心得。 這過程中，我得思考要怎麼寫出來，故得先理一理我的思緒，伴隨修改的過程中，逐漸理出比較清晰的概念。\n由上述得出的結論是:寫作就是思考的一種方式。 之前寫過的 這篇文章 也有提到，\u0026ldquo;學、思、做\u0026quot;是一個正循環，且同等重要。 那喜歡閱讀(學)，寫作(思)以及動手創作(做)的我，不就正好符合這個循環嘛!\n關於我 我喜歡運動: 籃球，健身，單車，羽球。 我會一些樂器: 小提琴、鋼琴、吉他。 我喜歡烹飪，中式、日式、西式。 我平常不愛喝酒，只在對的氣氛跟對的人喝。 我本身是讀機械系，工作卻是韌體工程師，平時也會玩一些電子硬體設計。 容易分心的我 曾經在做專案A 的時候跑去做專案B，然後專案C，專案D。每一樣都做得有點樣子，但都沒有做完。\n分心的原因有很多\n我真的興趣太廣泛，什麼都想試試。 當專案做得太久，就無聊了，失去注意力。 當專案遇到困難，就逃避了，轉移注意力。 不懂拒絕，讓過多的外務干擾我。 我知道沒做完 = 沒做，這是我得克服的缺點。我相信意識到就可以想辦法克服。 所以我會繼續一一把專案做完，並且學習專注。\n有毅力的我 我可以每天早上 6 點到健身房報到。 曾經每天 2 點睡，5點起床到實驗室，後來捐血時被驗出爆肝。 其實蠻懷念那時的自己，有一個非幹不可的理由，充滿激情與抱負。 叛逆的我 以傳統的眼光來看，我是有點叛逆，畢竟我不會對父母師長的話百依百順。\n我有一點叛逆，不喜歡聽話。 我喜歡自己思考，自己得到解答，自己做決定。 當有人告訴我這樣不行，而我不理解，那我就會試試看，看看到底行與不行。 我喜歡走自己的路，不喜歡走大家走的路。 與其說是叛逆，不如說是獨立思考吧。\n其實沒有誰說得準，只有結果可以說話。因為沒有人能回到過去，重新走另一條路來實驗到底哪一條路更好，所以人生的選擇大多數沒有答案。既然選擇了，只需要盡力去做即可，不管結果覺得好壞，都要相信一切都已是最好的安排。\n隨興所欲的我 今天要幹嘛今天再決定，說白了是沒有意識的過生活。\n我不是很喜歡這樣的自己，所以一直嘗試管理自己，進行規劃，給予自己目標，試圖讓自己在軌道上前進。\n我也不曉得對或不對，還得對我自己多多實驗，找出適合我的方式。\n成長型思維的我 一直以來我都認為沒有我做不到的事情，只要花時間去嘗試，所有事情我都可以學會。\n這種心態固然很好，然而最近我也了解到，有些事情是我做得到，但是再努力都沒辦法做得比某些人好，這個叫作天賦。有時選擇是比努力更重要的，發揮自己的天賦，或許比努力彌補自己的短處來的有幫助。\n","permalink":"https://wsmao.github.io/blog/%E8%AA%8D%E8%AD%98%E8%87%AA%E5%B7%B1/","tags":null,"title":"認識自己"},{"categories":null,"contents":"稚暉君曾在直播影片分享他的學習方式，其中邊打仗邊學習這句話讓我印象深刻。\n邊打仗邊學習強調了\u0026quot;做\u0026quot;的重要性，因為\u0026quot;只有做對了，才是學會了\u0026quot;。\n學習忌諱只學而不做，只有邊打仗邊學習才學得快。\n學習跟做缺一不可，兩者是相輔相成的正向循環。\n若只學而不做，那根本無法驗證你是否學會。 若只做而不學，那錯了不修正則一樣有學好。 好奇心是一種學習的欲望，想進步必須保持好奇心去探索，去學習。 而欲學好一件事，唯有做中學，學中做，\u0026quot;讓結果做你的導師\u0026quot;。\n這讓我想到另一句話: 學而不思則罔，思而不學則殆，這是孔子對學習態度的看法。\n「罔」，受欺，或解作迷惘。只知讀書，卻不肯思考，就會容易受欺蒙。 「殆」，疑惑，或解作危險。只顧思考，卻不去讀書，就容易想不通，引起疑惑。 「學」與「思」也必須相輔相成的正循環。 總結來說，學習的最佳方式是保持好奇心，在“學、思、做”三者之間找到平衡，並透過結果不斷迭代。\n","permalink":"https://wsmao.github.io/quote/%E7%A8%9A%E6%9A%89%E5%90%9B---%E9%82%8A%E6%89%93%E4%BB%97%E9%82%8A%E5%AD%B8%E7%BF%92/","tags":["quote"],"title":"最好的學習方式是: 邊打仗邊學習"},{"categories":null,"contents":"人的一輩子不過 3 萬多個日子，應當把握每個當下。\n我們要 \u0026mdash; 活得漂亮，熱情地追夢，並無所保留的去愛。\n","permalink":"https://wsmao.github.io/quote/unknown---live_beautifully/","tags":["quote"],"title":"Live beautifully, Dream Passionately, Love Completely."},{"categories":null,"contents":"當你撐不下去時怎麼辦？ 體操奧運冠軍媽媽的智慧提醒了我們，人總會在遇到困難時想著放棄，但是你也會在成功的時候慶幸當初自己沒有放棄。\n所以說，若你真的想放棄，那就在至少成功一次之後再做決定。\n倘若你真的不喜歡，那大可離開; 倘若你此時不願放棄了，那只說明過去想放棄的你，只是累了，此時的你將無比慶幸當初堅持下來的自己。\n","permalink":"https://wsmao.github.io/quote/nastia_liukin---you_can_quit_but_not_today/","tags":["quote"],"title":"You can quit, but not today."},{"categories":null,"contents":"緣起 寫 blog 紀錄並分享所學這個種子已經埋在心裡許久，其實也做過許多嘗試，然而最終都因為我搞錯這件事的\u0026quot;第一性原理\u0026quot;而放棄。\n某天在火車上划手機，看到了 Hahow 的這堂課 古君葳 - Github 免費架站術！輕鬆打造個人品牌 ，我看完介紹，二話不說就立刻購買開始上課。\n這不正是我需要的嗎? 既簡單又彈性。\n夠簡單，不用學習一堆網頁技術就能產出自己的網頁，光是這點就值得我投入 (因為重點是開始寫以及開始分享呀!) 用 Markdown、Github 以及 Git 任何人使用任何工具都可以馬上開始撰寫內容。 夠工程師，夠快速，純文字就能產生有點樣子的網頁。 Markdown 搭配 Git，可說是完全掌控了自己的 source 原始檔案，無須被 CMS 平台綁架，備份、版本控管甚至遷移都超級方便。 Github 還提供完全免費的架站空間阿，完美。 夠彈性，因此我認為 HUGO 適合絕大多數工程師(當然也不局限工程師): 只是想寫部落格的人，只需要套用別人的版型，簡單學一下 Markdown 語法，知道怎麼把內容上傳到 Github 平台即可。 一般工程師，尤其是軟體工程師，除了可以架設個人網站，還是用 Git、Markdown 等軟體工程師必用工具來架設的，超級簡單又方便，最適合不過了。 如果走前後端網頁領域的工程師(或者不滿意別人的版型)，也可以透過 HTML/CSS/Javascript 等技術，進一步客製化修改自己想要的版型(我就是喜歡自己設計)。 如果是對網站產生工具有興趣的話，HUGO 也是開源的工具哦，可以學習 GO 語言，去探究如此快速生成網頁的架構是如何設計的! 很開心現在透過網路課程學習課程是如此的方便。也特別感謝古古老師 開的這門課程，非常推薦大家去看看。內容不深且手把手教學，很好的介紹並帶領大家體驗 HUGO 這個架站神器。\n用 HUGO 架的網站，寫 HUGO 系列文章 既然使用了 HUGO 架站，也覺得蠻好用的，那就想要跟大家分享囉，有點 Meta-Hugo 的味道。\n本系列文章分為以下章節:\n初階概念篇，是寫給想要有自己的 blog，想立即寫文章分享的人。 進階概念篇，主要是寫給想自己動手客製化自己網站版型的人，這類的使用者需要有一點網頁前端技術的概念。 巨人的肩膀篇，如果除了有文章內容產出、好看的排版之後還想要更多進階功能，那就來試試超棒的第三方服務，站在巨人肩膀上吧。 初階概念篇 Hugo 架站，立刻發表文章: 從安裝，撰寫第一篇文章，到發布內容。 下載 Hugo 選主題 用 Markdown 寫文章 本基測試 上傳到 Github，遠端測試 Hugo 核心概念，檔案在幹嘛: 架構，目錄階層 Markdown config file、front matter 文章分類 HUGO 的 2 種 page 頁面，list \u0026amp; single 進階概念篇 Hugo 的 layout 系統: Hugo 如何找到適合的 template 來渲染內容 Hugo template 語法: 如何動態產生網頁內容。 Functions \u0026amp; Methods API: 好用的工具讓你事半功倍。 Hugo variables: 使用者資料如何儲存，Hugo 如何跟這些資料建立連結，最後在 Hugo template 中使用資料。 過去我犯的錯誤 那就是沒搞懂第一性原理。\n過去的我，搞錯重點了，我誤把\u0026quot;架設網站\u0026quot;當作重點，我想架設一個超級多功能、超級美的網站，顯然這不是我的初衷，只是完美主義的心態在作祟罷了。 搞錯重點的我學習許多前後端技術，並天真的打算從 0 到 1 雕刻出 blog，才要開始寫 blog。這導致我花了許多時間學了許多技術，但最終 blog 沒寫到就半途而廢了。 原因很簡單，因為我搞錯重點了，大量學習枯燥的技術，卻沒有一點有意義的產出，果不其然我失去動力了，我在做出 blog 前放棄寫 blog 了。\n原來，分享才是我想寫 blog 的第一性原理，我想分享，想幫助到別人，才是對我來說最重要的事情。至於是透過什麼媒介，哪怕在陽春的 blog，都不是重點。 開始分享就對了，分享就是利他主義，利人利己，何樂不為。希望我的學習經驗分享可以幫到人，即使只有一點點也很好。所謂教學相長，幫助到別人的同時也會回饋給自己。\n","permalink":"https://wsmao.github.io/hugo/about-hugo-series/","tags":["HUGO"],"title":"About hugo series."},{"categories":null,"contents":"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea\n","permalink":"https://wsmao.github.io/test/test/","tags":null,"title":"This is test file"}]